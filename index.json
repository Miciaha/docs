{
  "developer-guide/amazon-s3.html": {
    "href": "developer-guide/amazon-s3.html",
    "title": "How to use StorageAmazonS3 module | SimplCommerce Docs",
    "keywords": "How to use StorageAmazonS3 module You can easily make SimplCommerce using Amazon S3 to store and serve media like product images, category images,.. Prepare the bucket Login to aws console and create a bucket. Add configuration. Add the following configuration below to the appsettings.json \"AWS\": { \"S3\": { \"RegionEndpointName\": \"<Region name>\", \"AccessKeyId\": \"<Your access key>\", \"SecretAccessKey\": \"<Your secret key>\", \"BucketName\": \"<Your bucket name>\", \"PublicEndpoint\" <Optional > } } Then update the these configuration values according to your aws settings. For use in production, we recommend that the bucket should be served via CloudFront CDN. Then in that case, add your cloudfront domain to the PublicEndpoint. Note: If you like you can add these setting to the Core_AppSettings table instead. Active StorageAmazonS3 module By default, simplcommerce using StorageLocal module and store the media in the local folder SimplCommerce.WebHost\\wwwroot\\user-content. The current workaround is: In the SimplCommerce.WebHost.csproj replace <ProjectReference Include=\"..\\Modules\\SimplCommerce.Module.StorageLocal\\SimplCommerce.Module.StorageLocal.csproj\" /> by <ProjectReference Include=\"..\\Modules\\SimplCommerce.Module.StorageAmazonS3\\SimplCommerce.Module.StorageAmazonS3.csproj\" /> And also replace the module SimplCommerce.Module.StorageLocal to SimplCommerce.Module.StorageAmazonS3 in modules.json in the WebHost Build the solution then enjoy."
  },
  "developer-guide/development-tips.html": {
    "href": "developer-guide/development-tips.html",
    "title": "Development tips | SimplCommerce Docs",
    "keywords": "Development tips Using Secret Manager The Secret Manager tool stores sensitive data during the development of an ASP.NET Core project. See docs . We recommend you use secret manager to store specific setting data for your local development such as the connection string Using User Secrets Tool for Visual Studio Right click the SimplCommerce.WebHost Choose \"Manage User Secrets\" Write Your secrets in secrets.json as the following: { \"ConnectionStrings:DefaultConnection\": \"Your ConnectionString\" } Using User Secrets Command Line Tool dotnet user-secrets set \"ConnectionStrings:DefaultConnection\" \"Your ConnectionString\""
  },
  "developer-guide/getting-started.html": {
    "href": "developer-guide/getting-started.html",
    "title": "Getting Started | SimplCommerce Docs",
    "keywords": "Getting Started Docker For testing purpose only docker run -p 5000:80 simplcommerce/ci-build Visual Studio 2017 and SQL Server Prerequisites SQL Server Latest visual Studio 2019 (version >= 16.4) with .NET Core SDK 3.1 Steps to run Update the connection string in appsettings.json in SimplCommerce.WebHost Build whole solution. Make sure your startup project is SimplCommerce.Webhost(Right-click on SimpleCommerce.Webhost and select \"Set as startup project\"). Otherwise the next step will fail with a dbcontext missing error. Open Package Manager Console Window and type \"Update-Database\" then press \"Enter\". This action will create database schema. In Visual Studio, press \"Control + F5\". The back-office can access via /Admin using the pre-created account: admin@simplcommerce.com, 1qazZAQ! Mac/Linux with PostgreSQL Prerequisite PostgreSQL .NET Core SDK 3.1 Steps to run Update the connection string in appsettings.json in SimplCommerce.WebHost. Run file \"sudo ./simpl-build.sh\". In the terminal, navigate to the \"src/SimplCommerce.WebHost\" type \"dotnet run\" and hit \"Enter\". Open browser, open http://localhost:5000. The back-office can access via /Admin using the pre-created account: admin@simplcommerce.com, 1qazZAQ!"
  },
  "developer-guide/how-to-add-new-languages.html": {
    "href": "developer-guide/how-to-add-new-languages.html",
    "title": "How to add new languages | SimplCommerce Docs",
    "keywords": "How to add new languages Insert a record to Localization_Culture table Insert translation to Localization_Resource. Scripts for some languages can be found here https://github.com/simplcommerce/SimplCommerce/blob/master/src/Database Angularjs https://github.com/angular/angular.js/tree/master/src/ngLocale Summernote: https://github.com/summernote/summernote/tree/master/lang Bootstrap-star-rating: https://github.com/simplcommerce/SimplCommerce/tree/master/src/SimplCommerce.WebHost/wwwroot/lib/bootstrap-star-rating/js/locales"
  },
  "developer-guide/how-to-add-new-modules.html": {
    "href": "developer-guide/how-to-add-new-modules.html",
    "title": "How to add new modules | SimplCommerce Docs",
    "keywords": "How to add new modules In Visual Studio, right click on the solution choose add new project. In the Add New Project dialog choose Razor Class Library. Naming the module as xxx.Module.yyy, the location should be in src\\Modules. After the project has created. Right click on project name choose Edit xxx.Module.yyy.csproj, then replace all entire the csproj with the content below <Project Sdk=\"Microsoft.NET.Sdk.Razor\"> <ItemGroup> <ProjectReference Include=\"..\\..\\SimplCommerce.Infrastructure\\SimplCommerce.Infrastructure.csproj\" /> <ProjectReference Include=\"..\\SimplCommerce.Module.Core\\SimplCommerce.Module.Core.csproj\" /> </ItemGroup> </Project> Add a new file call \"module.json\" with the following structure { \"id\": \"xxx.Module.yyy\", \"Name\": \"Your module name\", \"isBundledWithHost\": true, \"version\": \"1.0.0\" } If you set isBundledWithHost to true. Then you need to add project reference to your module in the SimplCommerce.WebHost. Register your module in SimplCommerce.WebHost/modules.json so that it will be copied to the WebHost on build Add a new file call ModuleInitializer.cs and implement IModuleInitializer interface. This file is the place where you will register services and middlewares of your module Congratulations, your module is ready and you can start adding module code. Adding Angular module In the project folder/wwwroot/admin/ create your angular module. You can copy the existing module then modify it. Create controllers, views, service for your module. Add a new file call bundleconfig.json and register your javascript, css files Register your angular module by adding GlobalConfiguration.RegisterAngularModule(\"yourAngularModuleName\"); to the ConfigureServices in ModuleInitializer"
  },
  "developer-guide/how-to-add-new-payment-providers.html": {
    "href": "developer-guide/how-to-add-new-payment-providers.html",
    "title": "How to add new payment providers | SimplCommerce Docs",
    "keywords": "How to add new payment providers The first thing you need to do is create a new module. See how to add new module for more details Then, add a new record to the 'Payments_PaymentProvider' table Name: name of your payment method LandingViewComponentName: the name of a view component (you will create it) which will be invoked in the checkout page. ConfigureUrl: this is the AngularJS route which will route to the setting page of your payment provider. AdditionalSettings: a json string that hold the setting value needed for the provider to work. IsEnabled: a boolean value that will decide whether the provider is showed in the checkout page. Create an AngularJS form for the admin to configure your provider. This form will be routed to by the \"ConfigureUrl\". You can see existing provider such as Stripe or Paypal Express as examples. Then to the Admin --> System --> Payment Providers, your provider will show there. Create a view component, this view component view be invoked in the checkout page. This component act as the entry point of your new payment provider. Add a Controller to handle call back from the gateway. When you need to create the order, just call await _orderService.CreateOrder(currentUser, \"PaymentMethodName\");"
  },
  "developer-guide/how-to-setup-email-using-sendgrid.html": {
    "href": "developer-guide/how-to-setup-email-using-sendgrid.html",
    "title": "How to setup email using SendGrid | SimplCommerce Docs",
    "keywords": "How to setup email using SendGrid 1. Uncomment the AfterOrderCreatedSendEmailHanlder registration In the Order module, open the ModuleInitializer.cs uncomment the following line //services.AddTransient<INotificationHandler<AfterOrderCreated>, AfterOrderCreatedSendEmailHanlder>(); We are consider using feature flag. But it is for now 2. Add project reference In the SimplCommerce.WebHost.csproj add project reference to the SimplCommerce.Module.EmailSenderSendgrid module. And remove other email sender modules if any. 3. Update modules.json Open the modules.json in WebHost then add module EmailSenderSendgrid { \"id\": \"SimplCommerce.Module.EmailSenderSendgrid\", \"isBundledWithHost\": true, \"version\": \"1.0.0\" } Remove the other email sender modules if any 4. Add configuration for EmailSenderSendgrid module In the appsettings.json add the following setting. Update the settings values to your \"SendGrid\": { \"ApiKey\": \"Your Send Grid API Key\", \"FromEmail\": \"no-reply@simplcommerce.com\", \"FromName\": \"SimplCommerce\" }"
  },
  "developer-guide/how-to-setup-email-using-smtp.html": {
    "href": "developer-guide/how-to-setup-email-using-smtp.html",
    "title": "How to setup email using Smtp | SimplCommerce Docs",
    "keywords": "How to setup email using Smtp 1. Uncomment the AfterOrderCreatedSendEmailHanlder registration In the Order module, open the ModuleInitializer.cs uncomment the following line //services.AddTransient<INotificationHandler<AfterOrderCreated>, AfterOrderCreatedSendEmailHanlder>(); 2. Add project reference In the SimplCommerce.WebHost.csproj add project reference to the SimplCommerce.Module.EmailSenderSmtp module. And remove other email sender modules if any. 3. Update modules.json Open the modules.json in WebHost then add module EmailSenderSmtp { \"id\": \"SimplCommerce.Module.EmailSenderSmtp\", \"isBundledWithHost\": true, \"version\": \"1.0.0\" } Remove the other email sender modules if any 4. Insert or Update configuration for EmailSenderSmtp module Open the Core_AppSetting table in the database. Id Value Module IsVisibleInCommonSettingPage SmtpServer Your smtp server EmailSenderSmtp 0 SmtpPort Your smtp port EmailSenderSmtp 0 SmtpUsername Your smtp server username EmailSenderSmtp 0 SmtpPassword Your smtp password EmailSenderSmtp 0"
  },
  "developer-guide/index.html": {
    "href": "developer-guide/index.html",
    "title": "Introduction to SimplCommerce | SimplCommerce Docs",
    "keywords": "Introduction to SimplCommerce SimplCommerce is a simple, cross platform, modularized ecommerce system built on .NET Core. SimplCommerce is built based on: ASP.NET MVC Core 3.1 Entity Framework Core 3.1 ASP.NET Identity Core 3.1 Angular 1.6.3 MediatR 7.0.0 for domain event The architecture highlight The application is divided into modules. Each module contains all the stuff for itself to run including Controllers, Services, Views and even static files. If a module is no longer need, you can simply just delete it by a single click. The SimplCommerce.WebHost is the ASP.NET Core project and acts as the host. It will bootstrap the app and load all the modules it found in the modules.json . The source code of modules are placed outside the WebHost, in the /src/Modules folder . . During the application startup, the host will look up the modules.json and load all the modules it found in that file. If the module is not bundled with the Host then it will scan for all the *.dll in that Modules folder and load them up using AssemblyLoadContext. These assemblies will be then registered to MVC Core by the AddApplicationPart method. A ModuleViewLocationExpander is implemented to help the ViewEngine can find the right location for views in modules. For Entity Framework Core Every domain entity needs to inherit from Entity, then on the \"OnModelCreating\" method, we find them and register them to the DbContext: private static void RegisterEntities(ModelBuilder modelBuilder, IEnumerable<Type> typeToRegisters) { var entityTypes = typeToRegisters.Where(x => x.GetTypeInfo().IsSubclassOf(typeof(Entity)) && !x.GetTypeInfo().IsAbstract); foreach (var type in entityTypes) { modelBuilder.Entity(type); } } By default domain entities are mapped by convention. In case you need to some special mapping for your model. You can create a class that implements the ICustomModelBuilder for example: public class CatalogCustomModelBuilder : ICustomModelBuilder { public void Build(ModelBuilder modelBuilder) { modelBuilder.Entity<ProductLink>() .HasOne(x => x.Product) .WithMany(p => p.ProductLinks) .HasForeignKey(x => x.ProductId) .OnDelete(DeleteBehavior.Restrict); } }"
  },
  "developer-guide/internal-structure-of-a-module.html": {
    "href": "developer-guide/internal-structure-of-a-module.html",
    "title": "Internal structure of a module | SimplCommerce Docs",
    "keywords": "Internal structure of a module The structure of a module is very straightforward. We just want to highlight some important notes below: The Data folder is where we put custom repositories or custom entity framework mappings. Normally we use the generic Repository instead of creating repositories for every models. In the case we need more method than what the generic repository provide, we will create a repository for it. If you wish to do some custom mapping for your model, create an implementation of ICustomModelBuilder, which will automatically hooked during the startup. The Events folder is where we put domain event handling code. We use MediatR for publishing and handling domain events such as UserSignedIn, EntityViewed, EntityDeleting. You can publish your own events and handle them. The wwwroot folder is where we put the front-end code. The Services folder is where we put the business logic code. For simple scenarios select, insert, update, delete. We recommend that you call repository directly in Controllers, instead of creating services just a wrapping of Repositories. All the IoC registrations for each modules are need to register explicitly in ModuleInitializer Checkout my post on how to manage dependency on modules Plug-in architecture on ASP.NET Core - Dependency problems and solutions"
  },
  "developer-guide/intro.html": {
    "href": "developer-guide/intro.html",
    "title": "Introduction to SimplCommerce | SimplCommerce Docs",
    "keywords": "Introduction to SimplCommerce SimplCommerce is a simple, cross platform, modularized ecommerce system built on .NET Core. SimplCommerce is built based on ASP.NET MVC Core 3.1 Entity Framework Core 3.1 ASP.NET Identity Core 3.1 Angular 1.6.3 MediatR 7.0.0 for domain event The architecture highlight The application is divided into modules. Each module contains all the stuff for itself to run including Controllers, Services, Views and even static files. If a module is no longer need, you can simply just delete it by a single click. The SimplCommerce.WebHost is the ASP.NET Core project and acts as the host. It will bootstrap the app and load all the modules it found in the modules.json . The source code of modules are placed outside the WebHost, in the /src/Modules folder . . During the application startup, the host will look up the modules.json and load all the modules it found in that file. If the module is not bundled with the Host then it will scan for all the *.dll in that Modules folder and load them up using AssemblyLoadContext. These assemblies will be then registered to MVC Core by the AddApplicationPart method. A ModuleViewLocationExpander is implemented to help the ViewEngine can find the right location for views in modules. For Entity Framework Core Every domain entity needs to inherit from Entity, then on the \"OnModelCreating\" method, we find them and register them to the DbContext: private static void RegisterEntities(ModelBuilder modelBuilder, IEnumerable<Type> typeToRegisters) { var entityTypes = typeToRegisters.Where(x => x.GetTypeInfo().IsSubclassOf(typeof(Entity)) && !x.GetTypeInfo().IsAbstract); foreach (var type in entityTypes) { modelBuilder.Entity(type); } } By default domain entities are mapped by convention. In case you need to some special mapping for your model. You can create a class that implements the ICustomModelBuilder for example: public class CatalogCustomModelBuilder : ICustomModelBuilder { public void Build(ModelBuilder modelBuilder) { modelBuilder.Entity<ProductLink>() .HasOne(x => x.Product) .WithMany(p => p.ProductLinks) .HasForeignKey(x => x.ProductId) .OnDelete(DeleteBehavior.Restrict); } }"
  },
  "developer-guide/notes-for-export-pdf.html": {
    "href": "developer-guide/notes-for-export-pdf.html",
    "title": "Some notes for exporting PDF | SimplCommerce Docs",
    "keywords": "Some notes for exporting PDF SimplCommerce use a library called DinkToPdf to export PDF from html string. DinkToPdf is a cross-platform wrapper around the Webkit HTML to PDF library wkhtmltopdf . To make it work, you have to copy native library to root folder of the SimplCommerce.WebHost. You can find latest version of native library here . Select appropriate library for your OS (libwkhtmltox.dll for Windows, libwkhtmltox.so for Linux and libwkhtmltox.dylib for Mac) and platform (64 or 32 bit). When published, this navive library need to be inlcuded at the root folder. Note, When running in IIS Express, the app cannot load the libwkhtmltox. Haven't figured out why."
  },
  "developer-guide/notes-on-ef-migrations.html": {
    "href": "developer-guide/notes-on-ef-migrations.html",
    "title": "Notes on Entity Framework Migration | SimplCommerce Docs",
    "keywords": "Notes on Entity Framework Migration To keep the code clean, we will periodly clean up the Migrations folder. We intend to have only 1 migration file per a release, starting to 1.0.0. That mean for the release 1.0.0 we will merge all the existsing migration into one file. Similarly for the next release after 1.0.0, let say 1.1.0 for example, we will merge all the migration since 1.0.0 into one file and so on. There is no problem to migrate your database if you follow our offical releases. However, it's a little tricky if you use the code before our offical releases. If that is the case, then you can follow workarounds below. If the data is not important Simply just delete the existing database and create it again. If the data is imporatant. Open the [__EFMigrationsHistory] table, get the latest MigrationId, then base on the git commit history try to get the SimplDbContextModelSnapshot.cs at that MigrationId, then delete all the files in Migrations folder, paste the SimplDbContextModelSnapshot.cs at the MigrationId you have just got. Run Add-Migration, it will generate changes from that MigrationId to now"
  },
  "developer-guide/theme-development.html": {
    "href": "developer-guide/theme-development.html",
    "title": "Theme development | SimplCommerce Docs",
    "keywords": "Theme development It is very easy to develop a new theme in SimplCommerce. You don't need to install any thing to develop and test your theme. All you need is to download the latest release of SimplCommerce at https://github.com/simplcommerce/SimplCommerce/releases . Depends on your OS, pick a Windows or Mac version, extract the zip file, run the app by click on SimplCommerce.WebHost.exe (Windows), or type the './SimplCommerce.WebHost' in the Terminal and hit Enter (Mac). Of course, you can run the full source code with .NET Core SDK for advanced debuging. Steps to create a new theme Create a folder SimplCommerce.WebHost/Themes/[YourThemeName]. The theme name should be in PascalCase, no spacing. Create a theme.json file in your newly created folder { \"name\": \"YourThemeName\", \"fullName\": \"YourThemeName\", \"displayName\": \"Your theme name\", \"version\": \"1.0.0\" } In your theme folder, create Views/Shared/_Layout.cshtml, this is the layout of your theme. You can copy the existing _Layout.cshtml then modify it. You can add your custom style sheet or change the html structure. If you want to change the html structure of some particular views. Then following the origin views' structure, create your own views in your theme folder. It will override the original one. Not overrided views will fallback to the origin views. Please check out the SampleTheme. Create a folder SimplCommerce.WebHost/wwwroot/themes/[YourThemeName], add your css, images,... there. Also add the screenshot of your view SimplCommerce.WebHost/wwwroot/themes/[YourThemeName]/[YourThemeName].png. Login as admin, go to System --> Themes. You will see your theme there. Click \"Preview\" to see how it looks like, and \"Use\" for others people can see it. When your theme looks great, you can download it from the admin, apply it on the server or publish it in the marketplace"
  },
  "developer-guide/token-authentication.html": {
    "href": "developer-guide/token-authentication.html",
    "title": "Token Authentication for API | SimplCommerce Docs",
    "keywords": "Token Authentication for API Although the admin side is written as a Single Page Application with Angular, we chose cookies authentication for simplicity. Recently we have added Identity Server 4, a mature OpenID Connect and OAuth 2.0 Framework for ASP.NET Core. We use InMemory configuration You can update or add new Client according to your need. With the access token you can call SimplCommerce's APIs, such as 'add products', 'categories', etc.."
  },
  "developer-guide/widgets.html": {
    "href": "developer-guide/widgets.html",
    "title": "Widgets | SimplCommerce Docs",
    "keywords": "Widgets A widget is a fragment of UI that can be easily added to predefined placeholders in the views. Currently SimpleCommerce support 3 widget zones (placeholders) all of them are in the home page. We will support more widget zone in the futures, you can also define your own zones. Steps to develop new widgets Insert new record to [Core_Widget] table. We recommend that you should add the seed data in EF Core for it. See the example here Add YourWidgetNameApiController and implement Get/Post/Put, see Carousel widget as an example. Add AngularJS code for create and edit widget. The route to the form should match to then one that you your widget record in the [Core_Widget] table Create a ViewComponent to display your widget to users"
  },
  "developer-guide/working-with-databases.html": {
    "href": "developer-guide/working-with-databases.html",
    "title": "Working with databases | SimplCommerce Docs",
    "keywords": "Working with databases SimplCommerce supports many database engines. We have tested with SQL Server, PostgreSQL, SQLite. Generaly, it can work with any database that Entity Framework Core supports. See Entity Framework Core providers SimplCommerce supports SQL Server by default. There a couple of changes need to be made in order to swich to another database engine. Add package reference to the database provider you would like to use in the SimplCommerce.WebHost.csproj Update the code to use your the new provider in Program.cs configBuilder.AddEntityFrameworkConfig(options => options.UseSqlServer(configuration.GetConnectionString(\"DefaultConnection\")) ); and in SimplCommerce.WebHost/Extensions/ServiceCollectionExtensions.cs services.AddDbContextPool<SimplDbContext>(options => options.UseSqlServer(configuration.GetConnectionString(\"DefaultConnection\"), b => b.MigrationsAssembly(\"SimplCommerce.WebHost\"))); return services; Update the connection string in the appsettings.json to your database engine Delete all the existing migration code in the 'Migrations' folder in the SimplCommerce.WebHost project. Because the database migration code are generated differently from one to another database provider Run 'Add-Migration <NameOfMigration>' in Package Management Console or 'dotnet ef migrations add <NameOfMigration>' in the command line Run 'Update-Database' in the Package Management Console or 'dotnet ef database update' in the command line We encourage you to keep track the generated code in the Migrations folder in source control so that you can do the migration on your existing database later. When you want to do migration on existing database, get the latest MigrationId in '__EFMigrationsHistory' table. Then restore the Migration code back to that snapshot. Then you can do 'Add-Migration' from there. Entity Framework will detect changes since that snapshot"
  },
  "index.html": {
    "href": "index.html",
    "title": "SimplCommerce | SimplCommerce Docs",
    "keywords": "SimplCommerce A simple, cross platform, modularized ecommerce system built on .NET Core. Learn more Online demo Store front: http://demo.simplcommerce.com Administration: http://demo.simplcommerce.com/admin Email: admin@simplcommerce.com Password: 1qazZAQ! Contributors This project exists thanks to all the people who contribute. Backers Love our work and help us continue our activities? [ Become a backer ] Sponsors Become a sponsor and get your logo on our README on Github with a link to your site. [ Become a sponsor ] License SimplCommerce is licensed under the Apache 2.0 license."
  },
  "README.html": {
    "href": "README.html",
    "title": "SimplCommerce - Docs | SimplCommerce Docs",
    "keywords": "SimplCommerce - Docs This repo contains documentation for SimplCommerce. You can access the doc via https://docs.simplcommerce.com"
  },
  "user-guide/configuration.html": {
    "href": "user-guide/configuration.html",
    "title": "Configurations | SimplCommerce Docs",
    "keywords": "Configurations Global.DefaultCultureUI The value is culture name such as en-US or vi-VN. This value will be use add the default culture for first time users or users haven't choose any culture. This value also is us to as the default culture for the content in back-office, other enabled cultures will be translation"
  },
  "user-guide/intro.html": {
    "href": "user-guide/intro.html",
    "title": "SimplCommerce - User guide | SimplCommerce Docs",
    "keywords": "SimplCommerce - User guide"
  },
  "user-guide/payment-settings.html": {
    "href": "user-guide/payment-settings.html",
    "title": "Payment settings | SimplCommerce Docs",
    "keywords": "Payment settings Payment settings be access in the back-office at the top menu System --> Payment providers On that screen you can enable/disable payment providers, update setting such as ClientID, Client Secret. Checkout the web site of payment provider you want to enable on how to get the ClientID, Client Secret. You can also configure the fee for each payment provider"
  }
}